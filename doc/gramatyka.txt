grammar ::= (definition | error)*
definition ::= ('\n')* header (element | '\n' | error)*

header ::= ( | prototype) parent_name ( | object_name) '\n'
parent_name ::= name
object_name ::= name

element ::= (operation | attribute | property | constraint) '\n'

attribute ::= ( | static) visibility attribute_name ( |(':' attribute_type)) ( |('=' attribute_default))
attribute_name ::= name
attribute_type ::= name
attribute_default ::= number | string

operation ::= ( | static) visibility method_name '(' ( | parameters) ')' ( |(':' return_type))
method_name ::= name
return_type ::= name
parameters ::= (parameter ',')* parameter
parameter ::= parameter_name ':' parameter_type
parameter_name ::= name
paramter_type ::= name

property ::= property_name ':' property_value
property_name ::= name
property_value ::= multiplicity | name | string

constraint ::= constraint_type constraint_key constraint_value
constraint_type ::= 'allow' | 'require'
constraint_key ::= name
constraint_value ::= 'OBJECT' | 'STRING' | 'MULTIPLICITY' | ('[' constraint_constants ']')
constraint_constants ::= ( ( |(constraint_constant ',')) constraint_constant)
constraint_constant ::= name

multiplicity ::= (number|'*') ( | (".." (number|'*')))
number ::= "Word(nums)"
name ::= "Word(alphanums, alphanums + '-_')"
string ::= "quotedString"
visibility ::= '+' | '-' | '#' | '~'
static ::= '_'
prototype ::= 'prototype'
error ::= ''